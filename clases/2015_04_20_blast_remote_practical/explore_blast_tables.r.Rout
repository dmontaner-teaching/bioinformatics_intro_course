
R version 3.2.0 (2015-04-16) -- "Full of Ingredients"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ##' # Reading blast result tables with R
> ##' [David Montaner](http://www.dmontaner.com "my home page") _(2015-04-20)_
> ##'
> ##' The script shows some commands to explore BLAST results in tabular format.
> ##' 
> ##' ----------------------------------------------------------------------------
> 
> #rm (list = ls ())
> 
> ##' Set the working directory
> #setwd ("data")
> #dir ()
> 
> dir ("data")
[1] "example.fa"                   "myids.txt"                   
[3] "my_tab_blast_and_species.txt" "my_tab_blast.txt"            
> 
> ##' ## Read the first table
> datos1 <- read.table (file = "data/my_tab_blast.txt",  header = FALSE, sep = "\t", quote = "", as.is = TRUE)
> dim (datos1)
[1] 10774    12
> datos1[1:3,]
     V1                               V2     V3 V4 V5 V6 V7 V8   V9  V10   V11
1  9312 gi|528520364|ref|XM_001337519.3|  98.89 90  1  0  1 90 1302 1391 7e-37
2 27256 gi|528475849|ref|XM_005164514.1| 100.00 90  0  0  1 90 3924 4013 1e-38
3 27256 gi|528475847|ref|XM_005164513.1| 100.00 90  0  0  1 90 3930 4019 1e-38
  V12
1 161
2 167
3 167
> sapply (datos1, class) ## classes of the variables 
         V1          V2          V3          V4          V5          V6 
  "integer" "character"   "numeric"   "integer"   "integer"   "integer" 
         V7          V8          V9         V10         V11         V12 
  "integer"   "integer"   "integer"   "integer"   "numeric"   "numeric" 
> 
> 
> ##' We know the meaning of each of the columns form the documentation
> colnames (datos1) <- c("queryID", "subjectIDs", "identity.percent", "alignment.length", "mismatches", "gap.opens", "q.start", "q.end", "s.start", "s.end", "evalue", "bit.score")
> datos1[1:3,]
  queryID                       subjectIDs identity.percent alignment.length
1    9312 gi|528520364|ref|XM_001337519.3|            98.89               90
2   27256 gi|528475849|ref|XM_005164514.1|           100.00               90
3   27256 gi|528475847|ref|XM_005164513.1|           100.00               90
  mismatches gap.opens q.start q.end s.start s.end evalue bit.score
1          1         0       1    90    1302  1391  7e-37       161
2          0         0       1    90    3924  4013  1e-38       167
3          0         0       1    90    3930  4019  1e-38       167
> 
> 
> ##' Find out the number of sequences which where blasted,
> unicos <- unique (datos1[,"queryID"])
> unicos[1:3]
[1]  9312 27256 11283
> length (unicos)
[1] 293
> 
> ##' Some of our original reads or sequences may not have a blast hit,
> ##' lets find them.
> ##'
> ##' First we will read the original IDs extracted from the fasta file
> ids <- readLines ("data/myids.txt")
> ids[1:3]
[1] "9312"  "27256" "11283"
> length (ids)
[1] 300
> 
> ##' As expected, all the IDs in the blast results are in the fasta file:
> table (unicos %in% ids)

TRUE 
 293 
> 
> ##' but some original ids are not in the blast output
> setdiff (ids, unicos)
[1] "15614" "2738"  "28793" "4311"  "1437"  "311"   "4605" 
> 
> ##' We can count how may hits does it have every sequence
> counts <- table (datos1[,"queryID"])
> counts[1:3]

17 64 77 
23  1 26 
> 
> suma <- sum (counts[1:3])
> suma
[1] 50
> 
> 
> ##' Be careful as table rearranges its output.
> datos1[1:suma, 1:2]
   queryID                       subjectIDs
1     9312 gi|528520364|ref|XM_001337519.3|
2    27256 gi|528475849|ref|XM_005164514.1|
3    27256 gi|528475847|ref|XM_005164513.1|
4    27256 gi|528475845|ref|XM_005164512.1|
5    27256     gi|42415098|emb|BX324164.15|
6    11283 gi|528510266|ref|XM_005159670.1|
7    11283 gi|528510264|ref|XM_003200619.2|
8    11283 gi|528510262|ref|XM_005159669.1|
9    11283 gi|528510260|ref|XM_005159668.1|
10   11283 gi|528510258|ref|XM_005159667.1|
11   11283 gi|528510256|ref|XM_005159666.1|
12   11283 gi|528510254|ref|XM_005159665.1|
13   11283      gi|50080092|emb|BX511004.9|
14   27167      gi|94384518|emb|CR396590.9|
15   11135 gi|528514418|ref|XM_005161444.1|
16   11135    gi|156447403|emb|CU302322.12|
17   11135 gi|114326247|ref|NM_001048064.1|
18   11135     gi|34366544|emb|BX004995.15|
19   11949      gi|94384518|emb|CR396590.9|
20   21560      gi|94384518|emb|CR396590.9|
21    6129      gi|94384518|emb|CR396590.9|
22    6129      gi|94384518|emb|CR396590.9|
23    6129 gi|528492902|ref|XM_001920721.2|
24    6129      gi|30230940|emb|AL953903.8|
25    6129      gi|30230940|emb|AL953903.8|
26    6129      gi|30230940|emb|AL953903.8|
27    6129 gi|528492954|ref|XM_002663633.2|
28    6129 gi|528492944|ref|XM_002663628.2|
29    6129 gi|528492942|ref|XM_001342096.3|
30    6129      gi|90399826|emb|CR925820.5|
31    6129      gi|90399826|emb|CR925820.5|
32    6129      gi|90399826|emb|CR925820.5|
33    6129      gi|90399826|emb|CR925820.5|
34    6129      gi|90399826|emb|CR925820.5|
35    6129      gi|90399826|emb|CR925820.5|
36    6129      gi|90399826|emb|CR925820.5|
37    6129      gi|90399826|emb|CR925820.5|
38    6129      gi|45581093|emb|BX530037.7|
39    6129      gi|45581093|emb|BX530037.7|
40    6129      gi|45581093|emb|BX530037.7|
41    6129      gi|45581093|emb|BX530037.7|
42    6129      gi|45581093|emb|BX530037.7|
43    6129      gi|45581093|emb|BX530037.7|
44    6129      gi|45581093|emb|BX530037.7|
45    6129    gi|528492904|ref|XR_084325.2|
46    6129 gi|528492946|ref|XM_002663629.2|
47    6129 gi|125828377|ref|XM_001342220.1|
48    6980      gi|94384518|emb|CR396590.9|
49    6980      gi|94384518|emb|CR396590.9|
50    6980 gi|528492902|ref|XM_001920721.2|
> 
> ##' To make the proper selection
> touse <- datos1[,"queryID"] %in% names (counts[1:3])
> table (touse)
touse
FALSE  TRUE 
10724    50 
> which (touse) ##these are the positions
 [1]   104  8997  8998  8999  9000  9001  9002  9003  9004  9005  9006  9007
[13]  9008  9009  9010  9011  9012  9013  9014  9015  9016  9017  9018  9019
[25]  9020  9021  9022 10579 10580 10581 10582 10583 10584 10585 10586 10587
[37] 10588 10589 10590 10591 10592 10593 10594 10595 10596 10597 10598 10599
[49] 10600 10601
> 
> datos1[touse, 1:2]
      queryID                       subjectIDs
104        64      gi|94384518|emb|CR396590.9|
8997       77    gi|133893139|ref|NM_024254.3|
8998       77       gi|15214556|gb|BC012402.1|
8999       77       gi|13096839|gb|BC003216.1|
9000       77      gi|74219818|dbj|AK168639.1|
9001       77      gi|74193289|dbj|AK151464.1|
9002       77      gi|74181338|dbj|AK150905.1|
9003       77      gi|26331753|dbj|AK036861.1|
9004       77      gi|12846253|dbj|AK010654.1|
9005       77     gi|83318690|emb|CT009635.18|
9006       77       gi|57863218|gb|AC154679.2|
9007       77       gi|51593582|gb|BC080661.1|
9008       77      gi|74220288|dbj|AK152570.1|
9009       77 gi|564342251|ref|XM_006234712.1|
9010       77 gi|172354613|ref|NM_001109645.2|
9011       77 gi|589960284|ref|XM_006992658.1|
9012       77 gi|354482903|ref|XM_003503587.1|
9013       77 gi|532042915|ref|XM_005364230.1|
9014       77 gi|524921123|ref|XM_005064776.1|
9015       77      gi|23894529|emb|AL683897.5|
9016       77 gi|507695521|ref|XM_004643128.1|
9017       77 gi|507578150|ref|XM_004672540.1|
9018       77 gi|533132406|ref|XM_005381162.1|
9019       77 gi|533132404|ref|XM_005381161.1|
9020       77 gi|533132402|ref|XM_005381160.1|
9021       77 gi|533132400|ref|XM_005381159.1|
9022       77     gi|298916388|emb|FQ219931.1|
10579      17     gi|83318690|emb|CT009635.18|
10580      17       gi|57863218|gb|AC154679.2|
10581      17    gi|133893139|ref|NM_024254.3|
10582      17       gi|15214556|gb|BC012402.1|
10583      17       gi|13096839|gb|BC003216.1|
10584      17      gi|74220288|dbj|AK152570.1|
10585      17      gi|74219818|dbj|AK168639.1|
10586      17      gi|74193289|dbj|AK151464.1|
10587      17      gi|74181338|dbj|AK150905.1|
10588      17      gi|26331753|dbj|AK036861.1|
10589      17      gi|12846253|dbj|AK010654.1|
10590      17       gi|51593582|gb|BC080661.1|
10591      17 gi|532042915|ref|XM_005364230.1|
10592      17      gi|23894529|emb|AL683897.5|
10593      17 gi|298104086|ref|NM_001190181.1|
10594      17     gi|115550703|dbj|AK235777.1|
10595      17 gi|560958417|ref|XM_006201607.1|
10596      17 gi|511956624|ref|XM_004796563.1|
10597      17 gi|511956622|ref|XM_004796562.1|
10598      17 gi|511956620|ref|XM_004796561.1|
10599      17 gi|511854269|ref|XM_004751021.1|
10600      17 gi|511854266|ref|XM_004751020.1|
10601      17 gi|558100869|ref|XM_006082958.1|
> 
> 
> 
> 
> 
> ##' ## Read the second table
> datos2 <- read.table (file = "data/my_tab_blast_and_species.txt",  header = FALSE, sep = "\t", quote = "", as.is = TRUE)
> dim (datos2)
[1] 10774     5
> datos2[1:3,]
     V1        V2           V3             V4   V5
1  9312 528520364 XM_001337519 XM_001337519.3 7955
2 27256 528475849 XM_005164514 XM_005164514.1 7955
3 27256 528475847 XM_005164513 XM_005164513.1 7955
> sapply (datos2, class) ## classes of the variables 
         V1          V2          V3          V4          V5 
  "integer"   "integer" "character" "character"   "integer" 
> 
> ##' Set the row names 
> colnames (datos2) <- c("qseqid", "sgi", "sacc", "saccver", "staxids")
> datos2[1:3,]
  qseqid       sgi         sacc        saccver staxids
1   9312 528520364 XM_001337519 XM_001337519.3    7955
2  27256 528475849 XM_005164514 XM_005164514.1    7955
3  27256 528475847 XM_005164513 XM_005164513.1    7955
> 
> ##' Check that the two datasets are arranged in the same order
> table (datos1$queryID == datos2$qseqid)

 TRUE 
10774 
> 
> ##' The rows of the two datasets are in the same order. We can then combine them in a unique data.frame:
> datos <- cbind (datos1, datos2)
> class (datos)
[1] "data.frame"
> dim (datos)
[1] 10774    17
> sapply (datos, class)
         queryID       subjectIDs identity.percent alignment.length 
       "integer"      "character"        "numeric"        "integer" 
      mismatches        gap.opens          q.start            q.end 
       "integer"        "integer"        "integer"        "integer" 
         s.start            s.end           evalue        bit.score 
       "integer"        "integer"        "numeric"        "numeric" 
          qseqid              sgi             sacc          saccver 
       "integer"        "integer"      "character"      "character" 
         staxids 
       "integer" 
> 
> ##' We can clean up the working space form the data.frames datos1 and datos2.
> rm (datos1, datos2)
> ls ()
[1] "counts" "datos"  "ids"    "suma"   "touse"  "unicos"
> 
> ##' Doing this we avoid being confused with all data.frames.
> ##' but we also let some ram memory free.
> ##' To clear the memory cache we can use the command:
> gc ()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 230662 12.4     460000 24.6   350000 18.7
Vcells 481208  3.7    1023718  7.9   786431  6.0
> 
> 
> 
> ##' ## Get the Best Hits
> ##' Observe that all e-values are under certain predefined threshold
> summary (datos[, "evalue"])
     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. 
0.000e+00 0.000e+00 0.000e+00 5.387e-07 0.000e+00 4.000e-04 
> ##' in this case
> 0.0004
[1] 4e-04
> 
> 
> ##' Then the __best hit__ is the one with the maximum __bit score__.
> ##' Generally the BLAST results are ordered, but we can test it:
> for (uni in unicos) {
+     touse <- datos$queryID == uni
+     #print (max (datos[touse, "bit.score"]) == datos[touse, "bit.score"][1]) # the  first bit.score is the maximum
+     if (max (datos[touse, "bit.score"]) != datos[touse, "bit.score"][1]) stop ("PROBLEM")  # the stop should not be executed
+ }
> 
> 
> ##' In the case that we needed to rearrange the rows we could do:
> ## orden <- order (datos$queryID, datos$bit.score, decreasing = TRUE) ## THIS LINE DEFINES THE ORDER
> ## orden[1:3]
> ## datos <- datos[orden,] ## THIS LINE REARRANGES THE ROWS OF THE data.frame
> 
> 
> ##' Now that we know that our data.frame is ordered,
> ##' we can simply select the first row for each of the sequence identifiers.
> ##' The function `duplicated` may help. 
> dup <- duplicated (datos[,"queryID"])
> table (dup)
dup
FALSE  TRUE 
  293 10481 
> 
> ##' So we keep the __not__ duplicated rows:
> datos <- datos[!dup,]
> dim (datos)
[1] 293  17
> 
> 
> ##' And now we can compute the counts of each of the species
> sort (table (datos[,"staxids"]))

10116 59463 79684  9606  7955 10090 
    1     1     2     6    24   259 
> 
> ##' in percentages
> 100 * sort (table (datos[,"staxids"])) / nrow (datos)

     10116      59463      79684       9606       7955      10090 
 0.3412969  0.3412969  0.6825939  2.0477816  8.1911263 88.3959044 
> 
> ##' So the most common species is `r names (sort (table (datos[,"staxids"]), decreasing = TRUE)[1])`
> ##'
> ##' ----------------------------------------------------------------------------
> 
> proc.time()
   user  system elapsed 
  0.292   0.023   0.308 
